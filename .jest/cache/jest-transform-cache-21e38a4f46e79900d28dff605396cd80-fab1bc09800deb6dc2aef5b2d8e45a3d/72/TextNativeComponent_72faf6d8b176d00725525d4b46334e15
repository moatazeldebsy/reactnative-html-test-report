e71b97787e96a36b4195b875c26c5250
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;
var _ViewConfig = require("../NativeComponent/ViewConfig");
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));
var textViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    dynamicTypeRamp: true,
    maxFontSizeMultiplier: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true,
    onTextLayout: true,
    onInlineViewLayout: true,
    dataDetectorType: true,
    android_hyphenationFrequency: true,
    lineBreakStrategyIOS: true
  },
  directEventTypes: {
    topTextLayout: {
      registrationName: 'onTextLayout'
    },
    topInlineViewLayout: {
      registrationName: 'onInlineViewLayout'
    }
  },
  uiViewClassName: 'RCTText'
};
var virtualTextViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    maxFontSizeMultiplier: true
  },
  uiViewClassName: 'RCTVirtualText'
};
var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return (0, _ViewConfig.createViewConfig)(textViewConfig);
});
exports.NativeText = NativeText;
var NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return (0, _ViewConfig.createViewConfig)(virtualTextViewConfig);
});
exports.NativeVirtualText = NativeVirtualText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXh0Vmlld0NvbmZpZyIsInZhbGlkQXR0cmlidXRlcyIsImlzSGlnaGxpZ2h0ZWQiLCJpc1ByZXNzYWJsZSIsIm51bWJlck9mTGluZXMiLCJlbGxpcHNpemVNb2RlIiwiYWxsb3dGb250U2NhbGluZyIsImR5bmFtaWNUeXBlUmFtcCIsIm1heEZvbnRTaXplTXVsdGlwbGllciIsImRpc2FibGVkIiwic2VsZWN0YWJsZSIsInNlbGVjdGlvbkNvbG9yIiwiYWRqdXN0c0ZvbnRTaXplVG9GaXQiLCJtaW5pbXVtRm9udFNjYWxlIiwidGV4dEJyZWFrU3RyYXRlZ3kiLCJvblRleHRMYXlvdXQiLCJvbklubGluZVZpZXdMYXlvdXQiLCJkYXRhRGV0ZWN0b3JUeXBlIiwiYW5kcm9pZF9oeXBoZW5hdGlvbkZyZXF1ZW5jeSIsImxpbmVCcmVha1N0cmF0ZWd5SU9TIiwiZGlyZWN0RXZlbnRUeXBlcyIsInRvcFRleHRMYXlvdXQiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wSW5saW5lVmlld0xheW91dCIsInVpVmlld0NsYXNzTmFtZSIsInZpcnR1YWxUZXh0Vmlld0NvbmZpZyIsIk5hdGl2ZVRleHQiLCJjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIiwiY3JlYXRlVmlld0NvbmZpZyIsIk5hdGl2ZVZpcnR1YWxUZXh0IiwiZ2xvYmFsIiwiUk4kQnJpZGdlbGVzcyIsIlVJTWFuYWdlciIsImhhc1ZpZXdNYW5hZ2VyQ29uZmlnIl0sInNvdXJjZXMiOlsiVGV4dE5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQge2NyZWF0ZVZpZXdDb25maWd9IGZyb20gJy4uL05hdGl2ZUNvbXBvbmVudC9WaWV3Q29uZmlnJztcbmltcG9ydCBVSU1hbmFnZXIgZnJvbSAnLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJztcbmltcG9ydCBjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL2NyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MnO1xuaW1wb3J0IHt0eXBlIEhvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHt0eXBlIFByb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB7dHlwZSBQcmVzc0V2ZW50fSBmcm9tICcuLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQge3R5cGUgVGV4dFByb3BzfSBmcm9tICcuL1RleHRQcm9wcyc7XG5cbnR5cGUgTmF0aXZlVGV4dFByb3BzID0gJFJlYWRPbmx5PHtcbiAgLi4uVGV4dFByb3BzLFxuICBpc0hpZ2hsaWdodGVkPzogP2Jvb2xlYW4sXG4gIHNlbGVjdGlvbkNvbG9yPzogP1Byb2Nlc3NlZENvbG9yVmFsdWUsXG4gIG9uQ2xpY2s/OiA/KGV2ZW50OiBQcmVzc0V2ZW50KSA9PiBtaXhlZCxcbiAgLy8gVGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgcGxhdGZvcm1zIHRoYXQgb3B0aW1pemUgdGV4dCBoaXQgdGVzdGluZywgZS5nLixcbiAgLy8gcmVhY3QtbmF0aXZlLXdpbmRvd3MuIEl0IGNhbiBiZSB1c2VkIHRvIG9ubHkgaGl0IHRlc3QgdmlydHVhbCB0ZXh0IHNwYW5zXG4gIC8vIHRoYXQgaGF2ZSBwcmVzc2FibGUgZXZlbnRzIGF0dGFjaGVkIHRvIHRoZW0uXG4gIGlzUHJlc3NhYmxlPzogP2Jvb2xlYW4sXG59PjtcblxuY29uc3QgdGV4dFZpZXdDb25maWcgPSB7XG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIGlzSGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgaXNQcmVzc2FibGU6IHRydWUsXG4gICAgbnVtYmVyT2ZMaW5lczogdHJ1ZSxcbiAgICBlbGxpcHNpemVNb2RlOiB0cnVlLFxuICAgIGFsbG93Rm9udFNjYWxpbmc6IHRydWUsXG4gICAgZHluYW1pY1R5cGVSYW1wOiB0cnVlLFxuICAgIG1heEZvbnRTaXplTXVsdGlwbGllcjogdHJ1ZSxcbiAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICBzZWxlY3RhYmxlOiB0cnVlLFxuICAgIHNlbGVjdGlvbkNvbG9yOiB0cnVlLFxuICAgIGFkanVzdHNGb250U2l6ZVRvRml0OiB0cnVlLFxuICAgIG1pbmltdW1Gb250U2NhbGU6IHRydWUsXG4gICAgdGV4dEJyZWFrU3RyYXRlZ3k6IHRydWUsXG4gICAgb25UZXh0TGF5b3V0OiB0cnVlLFxuICAgIG9uSW5saW5lVmlld0xheW91dDogdHJ1ZSxcbiAgICBkYXRhRGV0ZWN0b3JUeXBlOiB0cnVlLFxuICAgIGFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3k6IHRydWUsXG4gICAgbGluZUJyZWFrU3RyYXRlZ3lJT1M6IHRydWUsXG4gIH0sXG4gIGRpcmVjdEV2ZW50VHlwZXM6IHtcbiAgICB0b3BUZXh0TGF5b3V0OiB7XG4gICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25UZXh0TGF5b3V0JyxcbiAgICB9LFxuICAgIHRvcElubGluZVZpZXdMYXlvdXQ6IHtcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbklubGluZVZpZXdMYXlvdXQnLFxuICAgIH0sXG4gIH0sXG4gIHVpVmlld0NsYXNzTmFtZTogJ1JDVFRleHQnLFxufTtcblxuY29uc3QgdmlydHVhbFRleHRWaWV3Q29uZmlnID0ge1xuICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICBpc0hpZ2hsaWdodGVkOiB0cnVlLFxuICAgIGlzUHJlc3NhYmxlOiB0cnVlLFxuICAgIG1heEZvbnRTaXplTXVsdGlwbGllcjogdHJ1ZSxcbiAgfSxcbiAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVmlydHVhbFRleHQnLFxufTtcblxuZXhwb3J0IGNvbnN0IE5hdGl2ZVRleHQ6IEhvc3RDb21wb25lbnQ8TmF0aXZlVGV4dFByb3BzPiA9XG4gIChjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzKCdSQ1RUZXh0JywgKCkgPT5cbiAgICBjcmVhdGVWaWV3Q29uZmlnKHRleHRWaWV3Q29uZmlnKSxcbiAgKTogYW55KTtcblxuZXhwb3J0IGNvbnN0IE5hdGl2ZVZpcnR1YWxUZXh0OiBIb3N0Q29tcG9uZW50PE5hdGl2ZVRleHRQcm9wcz4gPVxuICAhZ2xvYmFsLlJOJEJyaWRnZWxlc3MgJiYgIVVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZygnUkNUVmlydHVhbFRleHQnKVxuICAgID8gTmF0aXZlVGV4dFxuICAgIDogKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFZpcnR1YWxUZXh0JywgKCkgPT5cbiAgICAgICAgY3JlYXRlVmlld0NvbmZpZyh2aXJ0dWFsVGV4dFZpZXdDb25maWcpLFxuICAgICAgKTogYW55KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFpQkEsSUFBTUEsY0FBYyxHQUFHO0VBQ3JCQyxlQUFlLEVBQUU7SUFDZkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCQyxhQUFhLEVBQUUsSUFBSTtJQUNuQkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLGdCQUFnQixFQUFFLElBQUk7SUFDdEJDLGVBQWUsRUFBRSxJQUFJO0lBQ3JCQyxxQkFBcUIsRUFBRSxJQUFJO0lBQzNCQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsY0FBYyxFQUFFLElBQUk7SUFDcEJDLG9CQUFvQixFQUFFLElBQUk7SUFDMUJDLGdCQUFnQixFQUFFLElBQUk7SUFDdEJDLGlCQUFpQixFQUFFLElBQUk7SUFDdkJDLFlBQVksRUFBRSxJQUFJO0lBQ2xCQyxrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCQyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCQyw0QkFBNEIsRUFBRSxJQUFJO0lBQ2xDQyxvQkFBb0IsRUFBRTtFQUN4QixDQUFDO0VBQ0RDLGdCQUFnQixFQUFFO0lBQ2hCQyxhQUFhLEVBQUU7TUFDYkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUNEQyxtQkFBbUIsRUFBRTtNQUNuQkQsZ0JBQWdCLEVBQUU7SUFDcEI7RUFDRixDQUFDO0VBQ0RFLGVBQWUsRUFBRTtBQUNuQixDQUFDO0FBRUQsSUFBTUMscUJBQXFCLEdBQUc7RUFDNUJ4QixlQUFlLEVBQUU7SUFDZkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCSyxxQkFBcUIsRUFBRTtFQUN6QixDQUFDO0VBQ0RnQixlQUFlLEVBQUU7QUFDbkIsQ0FBQztBQUVNLElBQU1FLFVBQTBDLEdBQ3BELElBQUFDLHdDQUErQixFQUFDLFNBQVMsRUFBRTtFQUFBLE9BQzFDLElBQUFDLDRCQUFnQixFQUFDNUIsY0FBYyxDQUFDO0FBQUEsRUFDM0I7QUFBQztBQUVILElBQU02QixpQkFBaUQsR0FDNUQsQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLElBQUksQ0FBQ0Msa0JBQVMsQ0FBQ0Msb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsR0FDdEVQLFVBQVUsR0FDVCxJQUFBQyx3Q0FBK0IsRUFBQyxnQkFBZ0IsRUFBRTtFQUFBLE9BQ2pELElBQUFDLDRCQUFnQixFQUFDSCxxQkFBcUIsQ0FBQztBQUFBLEVBQ2xDO0FBQUMifQ==