75589351cfd9e9188af2ba7a41b85a7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ReactNativeStyleAttributes = _interopRequireDefault(require("../Components/View/ReactNativeStyleAttributes"));
var _ViewConfigIgnore = require("./ViewConfigIgnore");
var bubblingEventTypes = {
  topPress: {
    phasedRegistrationNames: {
      bubbled: 'onPress',
      captured: 'onPressCapture'
    }
  },
  topChange: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    }
  },
  topFocus: {
    phasedRegistrationNames: {
      bubbled: 'onFocus',
      captured: 'onFocusCapture'
    }
  },
  topBlur: {
    phasedRegistrationNames: {
      bubbled: 'onBlur',
      captured: 'onBlurCapture'
    }
  },
  topSubmitEditing: {
    phasedRegistrationNames: {
      bubbled: 'onSubmitEditing',
      captured: 'onSubmitEditingCapture'
    }
  },
  topEndEditing: {
    phasedRegistrationNames: {
      bubbled: 'onEndEditing',
      captured: 'onEndEditingCapture'
    }
  },
  topKeyPress: {
    phasedRegistrationNames: {
      bubbled: 'onKeyPress',
      captured: 'onKeyPressCapture'
    }
  },
  topTouchStart: {
    phasedRegistrationNames: {
      bubbled: 'onTouchStart',
      captured: 'onTouchStartCapture'
    }
  },
  topTouchMove: {
    phasedRegistrationNames: {
      bubbled: 'onTouchMove',
      captured: 'onTouchMoveCapture'
    }
  },
  topTouchCancel: {
    phasedRegistrationNames: {
      bubbled: 'onTouchCancel',
      captured: 'onTouchCancelCapture'
    }
  },
  topTouchEnd: {
    phasedRegistrationNames: {
      bubbled: 'onTouchEnd',
      captured: 'onTouchEndCapture'
    }
  },
  topPointerCancel: {
    phasedRegistrationNames: {
      captured: 'onPointerCancelCapture',
      bubbled: 'onPointerCancel'
    }
  },
  topPointerDown: {
    phasedRegistrationNames: {
      captured: 'onPointerDownCapture',
      bubbled: 'onPointerDown'
    }
  },
  topPointerMove: {
    phasedRegistrationNames: {
      captured: 'onPointerMoveCapture',
      bubbled: 'onPointerMove'
    }
  },
  topPointerUp: {
    phasedRegistrationNames: {
      captured: 'onPointerUpCapture',
      bubbled: 'onPointerUp'
    }
  },
  topPointerEnter: {
    phasedRegistrationNames: {
      captured: 'onPointerEnterCapture',
      bubbled: 'onPointerEnter',
      skipBubbling: true
    }
  },
  topPointerLeave: {
    phasedRegistrationNames: {
      captured: 'onPointerLeaveCapture',
      bubbled: 'onPointerLeave',
      skipBubbling: true
    }
  },
  topPointerOver: {
    phasedRegistrationNames: {
      captured: 'onPointerOverCapture',
      bubbled: 'onPointerOver'
    }
  },
  topPointerOut: {
    phasedRegistrationNames: {
      captured: 'onPointerOutCapture',
      bubbled: 'onPointerOut'
    }
  }
};
var directEventTypes = {
  topAccessibilityAction: {
    registrationName: 'onAccessibilityAction'
  },
  topAccessibilityTap: {
    registrationName: 'onAccessibilityTap'
  },
  topMagicTap: {
    registrationName: 'onMagicTap'
  },
  topAccessibilityEscape: {
    registrationName: 'onAccessibilityEscape'
  },
  topLayout: {
    registrationName: 'onLayout'
  },
  onGestureHandlerEvent: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
    registrationName: 'onGestureHandlerEvent'
  }),
  onGestureHandlerStateChange: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
    registrationName: 'onGestureHandlerStateChange'
  })
};
var validAttributesForNonEventProps = {
  accessible: true,
  accessibilityActions: true,
  accessibilityLabel: true,
  accessibilityHint: true,
  accessibilityLanguage: true,
  accessibilityValue: true,
  accessibilityViewIsModal: true,
  accessibilityElementsHidden: true,
  accessibilityIgnoresInvertColors: true,
  testID: true,
  backgroundColor: {
    process: require('../StyleSheet/processColor')
  },
  backfaceVisibility: true,
  opacity: true,
  shadowColor: {
    process: require('../StyleSheet/processColor')
  },
  shadowOffset: {
    diff: require('../Utilities/differ/sizesDiffer')
  },
  shadowOpacity: true,
  shadowRadius: true,
  needsOffscreenAlphaCompositing: true,
  overflow: true,
  shouldRasterizeIOS: true,
  transform: {
    diff: require('../Utilities/differ/matricesDiffer')
  },
  accessibilityRole: true,
  accessibilityState: true,
  nativeID: true,
  pointerEvents: true,
  removeClippedSubviews: true,
  borderRadius: true,
  borderColor: {
    process: require('../StyleSheet/processColor')
  },
  borderCurve: true,
  borderWidth: true,
  borderStyle: true,
  hitSlop: {
    diff: require('../Utilities/differ/insetsDiffer')
  },
  collapsable: true,
  borderTopWidth: true,
  borderTopColor: {
    process: require('../StyleSheet/processColor')
  },
  borderRightWidth: true,
  borderRightColor: {
    process: require('../StyleSheet/processColor')
  },
  borderBottomWidth: true,
  borderBottomColor: {
    process: require('../StyleSheet/processColor')
  },
  borderLeftWidth: true,
  borderLeftColor: {
    process: require('../StyleSheet/processColor')
  },
  borderStartWidth: true,
  borderStartColor: {
    process: require('../StyleSheet/processColor')
  },
  borderEndWidth: true,
  borderEndColor: {
    process: require('../StyleSheet/processColor')
  },
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  borderTopEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderBottomEndRadius: true,
  display: true,
  zIndex: true,
  top: true,
  right: true,
  start: true,
  end: true,
  bottom: true,
  left: true,
  width: true,
  height: true,
  minWidth: true,
  maxWidth: true,
  minHeight: true,
  maxHeight: true,
  marginTop: true,
  marginRight: true,
  marginBottom: true,
  marginLeft: true,
  marginStart: true,
  marginEnd: true,
  marginVertical: true,
  marginHorizontal: true,
  margin: true,
  paddingTop: true,
  paddingRight: true,
  paddingBottom: true,
  paddingLeft: true,
  paddingStart: true,
  paddingEnd: true,
  paddingVertical: true,
  paddingHorizontal: true,
  padding: true,
  flex: true,
  flexGrow: true,
  rowGap: true,
  columnGap: true,
  gap: true,
  flexShrink: true,
  flexBasis: true,
  flexDirection: true,
  flexWrap: true,
  justifyContent: true,
  alignItems: true,
  alignSelf: true,
  alignContent: true,
  position: true,
  aspectRatio: true,
  direction: true,
  style: _ReactNativeStyleAttributes.default
};
var validAttributesForEventProps = (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
  onLayout: true,
  onMagicTap: true,
  onAccessibilityAction: true,
  onAccessibilityEscape: true,
  onAccessibilityTap: true,
  onMoveShouldSetResponder: true,
  onMoveShouldSetResponderCapture: true,
  onStartShouldSetResponder: true,
  onStartShouldSetResponderCapture: true,
  onResponderGrant: true,
  onResponderReject: true,
  onResponderStart: true,
  onResponderEnd: true,
  onResponderRelease: true,
  onResponderMove: true,
  onResponderTerminate: true,
  onResponderTerminationRequest: true,
  onShouldBlockNativeResponder: true,
  onTouchStart: true,
  onTouchMove: true,
  onTouchEnd: true,
  onTouchCancel: true,
  onPointerUp: true,
  onPointerDown: true,
  onPointerCancel: true,
  onPointerEnter: true,
  onPointerMove: true,
  onPointerLeave: true,
  onPointerOver: true,
  onPointerOut: true
});
var PlatformBaseViewConfigIos = {
  bubblingEventTypes: bubblingEventTypes,
  directEventTypes: directEventTypes,
  validAttributes: Object.assign({}, validAttributesForNonEventProps, validAttributesForEventProps)
};
var _default = PlatformBaseViewConfigIos;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWJibGluZ0V2ZW50VHlwZXMiLCJ0b3BQcmVzcyIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiYnViYmxlZCIsImNhcHR1cmVkIiwidG9wQ2hhbmdlIiwidG9wRm9jdXMiLCJ0b3BCbHVyIiwidG9wU3VibWl0RWRpdGluZyIsInRvcEVuZEVkaXRpbmciLCJ0b3BLZXlQcmVzcyIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaENhbmNlbCIsInRvcFRvdWNoRW5kIiwidG9wUG9pbnRlckNhbmNlbCIsInRvcFBvaW50ZXJEb3duIiwidG9wUG9pbnRlck1vdmUiLCJ0b3BQb2ludGVyVXAiLCJ0b3BQb2ludGVyRW50ZXIiLCJza2lwQnViYmxpbmciLCJ0b3BQb2ludGVyTGVhdmUiLCJ0b3BQb2ludGVyT3ZlciIsInRvcFBvaW50ZXJPdXQiLCJkaXJlY3RFdmVudFR5cGVzIiwidG9wQWNjZXNzaWJpbGl0eUFjdGlvbiIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ0b3BBY2Nlc3NpYmlsaXR5VGFwIiwidG9wTWFnaWNUYXAiLCJ0b3BBY2Nlc3NpYmlsaXR5RXNjYXBlIiwidG9wTGF5b3V0Iiwib25HZXN0dXJlSGFuZGxlckV2ZW50IiwiRHluYW1pY2FsbHlJbmplY3RlZEJ5R2VzdHVyZUhhbmRsZXIiLCJvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UiLCJ2YWxpZEF0dHJpYnV0ZXNGb3JOb25FdmVudFByb3BzIiwiYWNjZXNzaWJsZSIsImFjY2Vzc2liaWxpdHlBY3Rpb25zIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiYWNjZXNzaWJpbGl0eUhpbnQiLCJhY2Nlc3NpYmlsaXR5TGFuZ3VhZ2UiLCJhY2Nlc3NpYmlsaXR5VmFsdWUiLCJhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWwiLCJhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4iLCJhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9ycyIsInRlc3RJRCIsImJhY2tncm91bmRDb2xvciIsInByb2Nlc3MiLCJyZXF1aXJlIiwiYmFja2ZhY2VWaXNpYmlsaXR5Iiwib3BhY2l0eSIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0IiwiZGlmZiIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJuZWVkc09mZnNjcmVlbkFscGhhQ29tcG9zaXRpbmciLCJvdmVyZmxvdyIsInNob3VsZFJhc3Rlcml6ZUlPUyIsInRyYW5zZm9ybSIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwibmF0aXZlSUQiLCJwb2ludGVyRXZlbnRzIiwicmVtb3ZlQ2xpcHBlZFN1YnZpZXdzIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJDdXJ2ZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJoaXRTbG9wIiwiY29sbGFwc2FibGUiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyU3RhcnRXaWR0aCIsImJvcmRlclN0YXJ0Q29sb3IiLCJib3JkZXJFbmRXaWR0aCIsImJvcmRlckVuZENvbG9yIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyVG9wU3RhcnRSYWRpdXMiLCJib3JkZXJUb3BFbmRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21TdGFydFJhZGl1cyIsImJvcmRlckJvdHRvbUVuZFJhZGl1cyIsImRpc3BsYXkiLCJ6SW5kZXgiLCJ0b3AiLCJyaWdodCIsInN0YXJ0IiwiZW5kIiwiYm90dG9tIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwibWluV2lkdGgiLCJtYXhXaWR0aCIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpblN0YXJ0IiwibWFyZ2luRW5kIiwibWFyZ2luVmVydGljYWwiLCJtYXJnaW5Ib3Jpem9udGFsIiwibWFyZ2luIiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdTdGFydCIsInBhZGRpbmdFbmQiLCJwYWRkaW5nVmVydGljYWwiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmciLCJmbGV4IiwiZmxleEdyb3ciLCJyb3dHYXAiLCJjb2x1bW5HYXAiLCJnYXAiLCJmbGV4U2hyaW5rIiwiZmxleEJhc2lzIiwiZmxleERpcmVjdGlvbiIsImZsZXhXcmFwIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiYWxpZ25TZWxmIiwiYWxpZ25Db250ZW50IiwicG9zaXRpb24iLCJhc3BlY3RSYXRpbyIsImRpcmVjdGlvbiIsInN0eWxlIiwiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJ2YWxpZEF0dHJpYnV0ZXNGb3JFdmVudFByb3BzIiwiQ29uZGl0aW9uYWxseUlnbm9yZWRFdmVudEhhbmRsZXJzIiwib25MYXlvdXQiLCJvbk1hZ2ljVGFwIiwib25BY2Nlc3NpYmlsaXR5QWN0aW9uIiwib25BY2Nlc3NpYmlsaXR5RXNjYXBlIiwib25BY2Nlc3NpYmlsaXR5VGFwIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsIm9uUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlclJlamVjdCIsIm9uUmVzcG9uZGVyU3RhcnQiLCJvblJlc3BvbmRlckVuZCIsIm9uUmVzcG9uZGVyUmVsZWFzZSIsIm9uUmVzcG9uZGVyTW92ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRlIiwib25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QiLCJvblNob3VsZEJsb2NrTmF0aXZlUmVzcG9uZGVyIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwib25Ub3VjaENhbmNlbCIsIm9uUG9pbnRlclVwIiwib25Qb2ludGVyRG93biIsIm9uUG9pbnRlckNhbmNlbCIsIm9uUG9pbnRlckVudGVyIiwib25Qb2ludGVyTW92ZSIsIm9uUG9pbnRlckxlYXZlIiwib25Qb2ludGVyT3ZlciIsIm9uUG9pbnRlck91dCIsIlBsYXRmb3JtQmFzZVZpZXdDb25maWdJb3MiLCJ2YWxpZEF0dHJpYnV0ZXMiXSwic291cmNlcyI6WyJCYXNlVmlld0NvbmZpZy5pb3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbmltcG9ydCB0eXBlIHtQYXJ0aWFsVmlld0NvbmZpZ1dpdGhvdXROYW1lfSBmcm9tICcuL1BsYXRmb3JtQmFzZVZpZXdDb25maWcnO1xuXG5pbXBvcnQgUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1JlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzJztcbmltcG9ydCB7XG4gIENvbmRpdGlvbmFsbHlJZ25vcmVkRXZlbnRIYW5kbGVycyxcbiAgRHluYW1pY2FsbHlJbmplY3RlZEJ5R2VzdHVyZUhhbmRsZXIsXG59IGZyb20gJy4vVmlld0NvbmZpZ0lnbm9yZSc7XG5cbmNvbnN0IGJ1YmJsaW5nRXZlbnRUeXBlcyA9IHtcbiAgLy8gR2VuZXJpYyBFdmVudHNcbiAgdG9wUHJlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uUHJlc3MnLFxuICAgICAgY2FwdHVyZWQ6ICdvblByZXNzQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wQ2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNoYW5nZScsXG4gICAgICBjYXB0dXJlZDogJ29uQ2hhbmdlQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wRm9jdXM6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uRm9jdXMnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkZvY3VzQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wQmx1cjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25CbHVyJyxcbiAgICAgIGNhcHR1cmVkOiAnb25CbHVyQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wU3VibWl0RWRpdGluZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25TdWJtaXRFZGl0aW5nJyxcbiAgICAgIGNhcHR1cmVkOiAnb25TdWJtaXRFZGl0aW5nQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wRW5kRWRpdGluZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25FbmRFZGl0aW5nJyxcbiAgICAgIGNhcHR1cmVkOiAnb25FbmRFZGl0aW5nQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wS2V5UHJlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uS2V5UHJlc3MnLFxuICAgICAgY2FwdHVyZWQ6ICdvbktleVByZXNzQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgdG9wVG91Y2hTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Ub3VjaFN0YXJ0JyxcbiAgICAgIGNhcHR1cmVkOiAnb25Ub3VjaFN0YXJ0Q2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wVG91Y2hNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvblRvdWNoTW92ZScsXG4gICAgICBjYXB0dXJlZDogJ29uVG91Y2hNb3ZlQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wVG91Y2hDYW5jZWw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uVG91Y2hDYW5jZWwnLFxuICAgICAgY2FwdHVyZWQ6ICdvblRvdWNoQ2FuY2VsQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcbiAgdG9wVG91Y2hFbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uVG91Y2hFbmQnLFxuICAgICAgY2FwdHVyZWQ6ICdvblRvdWNoRW5kQ2FwdHVyZScsXG4gICAgfSxcbiAgfSxcblxuICAvLyBFeHBlcmltZW50YWwvV29yayBpbiBQcm9ncmVzcyBQb2ludGVyIEV2ZW50cyAobm90IHlldCByZWFkeSBmb3IgdXNlKVxuICB0b3BQb2ludGVyQ2FuY2VsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGNhcHR1cmVkOiAnb25Qb2ludGVyQ2FuY2VsQ2FwdHVyZScsXG4gICAgICBidWJibGVkOiAnb25Qb2ludGVyQ2FuY2VsJyxcbiAgICB9LFxuICB9LFxuICB0b3BQb2ludGVyRG93bjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBjYXB0dXJlZDogJ29uUG9pbnRlckRvd25DYXB0dXJlJyxcbiAgICAgIGJ1YmJsZWQ6ICdvblBvaW50ZXJEb3duJyxcbiAgICB9LFxuICB9LFxuICB0b3BQb2ludGVyTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBjYXB0dXJlZDogJ29uUG9pbnRlck1vdmVDYXB0dXJlJyxcbiAgICAgIGJ1YmJsZWQ6ICdvblBvaW50ZXJNb3ZlJyxcbiAgICB9LFxuICB9LFxuICB0b3BQb2ludGVyVXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgY2FwdHVyZWQ6ICdvblBvaW50ZXJVcENhcHR1cmUnLFxuICAgICAgYnViYmxlZDogJ29uUG9pbnRlclVwJyxcbiAgICB9LFxuICB9LFxuICB0b3BQb2ludGVyRW50ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgY2FwdHVyZWQ6ICdvblBvaW50ZXJFbnRlckNhcHR1cmUnLFxuICAgICAgYnViYmxlZDogJ29uUG9pbnRlckVudGVyJyxcbiAgICAgIHNraXBCdWJibGluZzogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICB0b3BQb2ludGVyTGVhdmU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgY2FwdHVyZWQ6ICdvblBvaW50ZXJMZWF2ZUNhcHR1cmUnLFxuICAgICAgYnViYmxlZDogJ29uUG9pbnRlckxlYXZlJyxcbiAgICAgIHNraXBCdWJibGluZzogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICB0b3BQb2ludGVyT3Zlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBjYXB0dXJlZDogJ29uUG9pbnRlck92ZXJDYXB0dXJlJyxcbiAgICAgIGJ1YmJsZWQ6ICdvblBvaW50ZXJPdmVyJyxcbiAgICB9LFxuICB9LFxuICB0b3BQb2ludGVyT3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGNhcHR1cmVkOiAnb25Qb2ludGVyT3V0Q2FwdHVyZScsXG4gICAgICBidWJibGVkOiAnb25Qb2ludGVyT3V0JyxcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgZGlyZWN0RXZlbnRUeXBlcyA9IHtcbiAgdG9wQWNjZXNzaWJpbGl0eUFjdGlvbjoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbkFjY2Vzc2liaWxpdHlBY3Rpb24nLFxuICB9LFxuICB0b3BBY2Nlc3NpYmlsaXR5VGFwOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uQWNjZXNzaWJpbGl0eVRhcCcsXG4gIH0sXG4gIHRvcE1hZ2ljVGFwOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTWFnaWNUYXAnLFxuICB9LFxuICB0b3BBY2Nlc3NpYmlsaXR5RXNjYXBlOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uQWNjZXNzaWJpbGl0eUVzY2FwZScsXG4gIH0sXG4gIHRvcExheW91dDoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbkxheW91dCcsXG4gIH0sXG4gIG9uR2VzdHVyZUhhbmRsZXJFdmVudDogRHluYW1pY2FsbHlJbmplY3RlZEJ5R2VzdHVyZUhhbmRsZXIoe1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbkdlc3R1cmVIYW5kbGVyRXZlbnQnLFxuICB9KSxcbiAgb25HZXN0dXJlSGFuZGxlclN0YXRlQ2hhbmdlOiBEeW5hbWljYWxseUluamVjdGVkQnlHZXN0dXJlSGFuZGxlcih7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZScsXG4gIH0pLFxufTtcblxuY29uc3QgdmFsaWRBdHRyaWJ1dGVzRm9yTm9uRXZlbnRQcm9wcyA9IHtcbiAgLy8gVmlldyBQcm9wc1xuICBhY2Nlc3NpYmxlOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5QWN0aW9uczogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eUxhYmVsOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5SGludDogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eUxhbmd1YWdlOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5VmFsdWU6IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlWaWV3SXNNb2RhbDogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9yczogdHJ1ZSxcbiAgdGVzdElEOiB0cnVlLFxuICBiYWNrZ3JvdW5kQ29sb3I6IHtwcm9jZXNzOiByZXF1aXJlKCcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpfSxcbiAgYmFja2ZhY2VWaXNpYmlsaXR5OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBzaGFkb3dDb2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuICBzaGFkb3dPZmZzZXQ6IHtkaWZmOiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvZGlmZmVyL3NpemVzRGlmZmVyJyl9LFxuICBzaGFkb3dPcGFjaXR5OiB0cnVlLFxuICBzaGFkb3dSYWRpdXM6IHRydWUsXG4gIG5lZWRzT2Zmc2NyZWVuQWxwaGFDb21wb3NpdGluZzogdHJ1ZSxcbiAgb3ZlcmZsb3c6IHRydWUsXG4gIHNob3VsZFJhc3Rlcml6ZUlPUzogdHJ1ZSxcbiAgdHJhbnNmb3JtOiB7ZGlmZjogcmVxdWlyZSgnLi4vVXRpbGl0aWVzL2RpZmZlci9tYXRyaWNlc0RpZmZlcicpfSxcbiAgYWNjZXNzaWJpbGl0eVJvbGU6IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlTdGF0ZTogdHJ1ZSxcbiAgbmF0aXZlSUQ6IHRydWUsXG4gIHBvaW50ZXJFdmVudHM6IHRydWUsXG4gIHJlbW92ZUNsaXBwZWRTdWJ2aWV3czogdHJ1ZSxcbiAgYm9yZGVyUmFkaXVzOiB0cnVlLFxuICBib3JkZXJDb2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuICBib3JkZXJDdXJ2ZTogdHJ1ZSxcbiAgYm9yZGVyV2lkdGg6IHRydWUsXG4gIGJvcmRlclN0eWxlOiB0cnVlLFxuICBoaXRTbG9wOiB7ZGlmZjogcmVxdWlyZSgnLi4vVXRpbGl0aWVzL2RpZmZlci9pbnNldHNEaWZmZXInKX0sXG4gIGNvbGxhcHNhYmxlOiB0cnVlLFxuXG4gIGJvcmRlclRvcFdpZHRoOiB0cnVlLFxuICBib3JkZXJUb3BDb2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICBib3JkZXJSaWdodENvbG9yOiB7cHJvY2VzczogcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKX0sXG4gIGJvcmRlckJvdHRvbVdpZHRoOiB0cnVlLFxuICBib3JkZXJCb3R0b21Db2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuICBib3JkZXJMZWZ0V2lkdGg6IHRydWUsXG4gIGJvcmRlckxlZnRDb2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuICBib3JkZXJTdGFydFdpZHRoOiB0cnVlLFxuICBib3JkZXJTdGFydENvbG9yOiB7cHJvY2VzczogcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKX0sXG4gIGJvcmRlckVuZFdpZHRoOiB0cnVlLFxuICBib3JkZXJFbmRDb2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuXG4gIGJvcmRlclRvcExlZnRSYWRpdXM6IHRydWUsXG4gIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiB0cnVlLFxuICBib3JkZXJUb3BTdGFydFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyVG9wRW5kUmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyQm90dG9tU3RhcnRSYWRpdXM6IHRydWUsXG4gIGJvcmRlckJvdHRvbUVuZFJhZGl1czogdHJ1ZSxcbiAgZGlzcGxheTogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuXG4gIC8vIFNoYWRvd1ZpZXcgcHJvcGVydGllc1xuICB0b3A6IHRydWUsXG4gIHJpZ2h0OiB0cnVlLFxuICBzdGFydDogdHJ1ZSxcbiAgZW5kOiB0cnVlLFxuICBib3R0b206IHRydWUsXG4gIGxlZnQ6IHRydWUsXG5cbiAgd2lkdGg6IHRydWUsXG4gIGhlaWdodDogdHJ1ZSxcblxuICBtaW5XaWR0aDogdHJ1ZSxcbiAgbWF4V2lkdGg6IHRydWUsXG4gIG1pbkhlaWdodDogdHJ1ZSxcbiAgbWF4SGVpZ2h0OiB0cnVlLFxuXG4gIC8vIEFsc28gZGVjbGFyZWQgYXMgVmlld1Byb3BzXG4gIC8vIGJvcmRlclRvcFdpZHRoOiB0cnVlLFxuICAvLyBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAvLyBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgLy8gYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAvLyBib3JkZXJTdGFydFdpZHRoOiB0cnVlLFxuICAvLyBib3JkZXJFbmRXaWR0aDogdHJ1ZSxcbiAgLy8gYm9yZGVyV2lkdGg6IHRydWUsXG5cbiAgbWFyZ2luVG9wOiB0cnVlLFxuICBtYXJnaW5SaWdodDogdHJ1ZSxcbiAgbWFyZ2luQm90dG9tOiB0cnVlLFxuICBtYXJnaW5MZWZ0OiB0cnVlLFxuICBtYXJnaW5TdGFydDogdHJ1ZSxcbiAgbWFyZ2luRW5kOiB0cnVlLFxuICBtYXJnaW5WZXJ0aWNhbDogdHJ1ZSxcbiAgbWFyZ2luSG9yaXpvbnRhbDogdHJ1ZSxcbiAgbWFyZ2luOiB0cnVlLFxuXG4gIHBhZGRpbmdUb3A6IHRydWUsXG4gIHBhZGRpbmdSaWdodDogdHJ1ZSxcbiAgcGFkZGluZ0JvdHRvbTogdHJ1ZSxcbiAgcGFkZGluZ0xlZnQ6IHRydWUsXG4gIHBhZGRpbmdTdGFydDogdHJ1ZSxcbiAgcGFkZGluZ0VuZDogdHJ1ZSxcbiAgcGFkZGluZ1ZlcnRpY2FsOiB0cnVlLFxuICBwYWRkaW5nSG9yaXpvbnRhbDogdHJ1ZSxcbiAgcGFkZGluZzogdHJ1ZSxcblxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgcm93R2FwOiB0cnVlLFxuICBjb2x1bW5HYXA6IHRydWUsXG4gIGdhcDogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleEJhc2lzOiB0cnVlLFxuICBmbGV4RGlyZWN0aW9uOiB0cnVlLFxuICBmbGV4V3JhcDogdHJ1ZSxcbiAganVzdGlmeUNvbnRlbnQ6IHRydWUsXG4gIGFsaWduSXRlbXM6IHRydWUsXG4gIGFsaWduU2VsZjogdHJ1ZSxcbiAgYWxpZ25Db250ZW50OiB0cnVlLFxuICBwb3NpdGlvbjogdHJ1ZSxcbiAgYXNwZWN0UmF0aW86IHRydWUsXG5cbiAgLy8gQWxzbyBkZWNsYXJlZCBhcyBWaWV3UHJvcHNcbiAgLy8gb3ZlcmZsb3c6IHRydWUsXG4gIC8vIGRpc3BsYXk6IHRydWUsXG5cbiAgZGlyZWN0aW9uOiB0cnVlLFxuXG4gIHN0eWxlOiBSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyxcbn07XG5cbi8vIFByb3BzIGZvciBidWJibGluZyBhbmQgZGlyZWN0IGV2ZW50c1xuY29uc3QgdmFsaWRBdHRyaWJ1dGVzRm9yRXZlbnRQcm9wcyA9IENvbmRpdGlvbmFsbHlJZ25vcmVkRXZlbnRIYW5kbGVycyh7XG4gIG9uTGF5b3V0OiB0cnVlLFxuICBvbk1hZ2ljVGFwOiB0cnVlLFxuXG4gIC8vIEFjY2Vzc2liaWxpdHlcbiAgb25BY2Nlc3NpYmlsaXR5QWN0aW9uOiB0cnVlLFxuICBvbkFjY2Vzc2liaWxpdHlFc2NhcGU6IHRydWUsXG4gIG9uQWNjZXNzaWJpbGl0eVRhcDogdHJ1ZSxcblxuICAvLyBQYW5SZXNwb25kZXIgaGFuZGxlcnNcbiAgb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyOiB0cnVlLFxuICBvbk1vdmVTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiB0cnVlLFxuICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiB0cnVlLFxuICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogdHJ1ZSxcbiAgb25SZXNwb25kZXJHcmFudDogdHJ1ZSxcbiAgb25SZXNwb25kZXJSZWplY3Q6IHRydWUsXG4gIG9uUmVzcG9uZGVyU3RhcnQ6IHRydWUsXG4gIG9uUmVzcG9uZGVyRW5kOiB0cnVlLFxuICBvblJlc3BvbmRlclJlbGVhc2U6IHRydWUsXG4gIG9uUmVzcG9uZGVyTW92ZTogdHJ1ZSxcbiAgb25SZXNwb25kZXJUZXJtaW5hdGU6IHRydWUsXG4gIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0OiB0cnVlLFxuICBvblNob3VsZEJsb2NrTmF0aXZlUmVzcG9uZGVyOiB0cnVlLFxuXG4gIC8vIFRvdWNoIGV2ZW50c1xuICBvblRvdWNoU3RhcnQ6IHRydWUsXG4gIG9uVG91Y2hNb3ZlOiB0cnVlLFxuICBvblRvdWNoRW5kOiB0cnVlLFxuICBvblRvdWNoQ2FuY2VsOiB0cnVlLFxuXG4gIC8vIFBvaW50ZXIgZXZlbnRzXG4gIG9uUG9pbnRlclVwOiB0cnVlLFxuICBvblBvaW50ZXJEb3duOiB0cnVlLFxuICBvblBvaW50ZXJDYW5jZWw6IHRydWUsXG4gIG9uUG9pbnRlckVudGVyOiB0cnVlLFxuICBvblBvaW50ZXJNb3ZlOiB0cnVlLFxuICBvblBvaW50ZXJMZWF2ZTogdHJ1ZSxcbiAgb25Qb2ludGVyT3ZlcjogdHJ1ZSxcbiAgb25Qb2ludGVyT3V0OiB0cnVlLFxufSk7XG5cbi8qKlxuICogT24gaU9TLCB2aWV3IG1hbmFnZXJzIGRlZmluZSBhbGwgb2YgYSBjb21wb25lbnQncyBwcm9wcy5cbiAqIEFsbCB2aWV3IG1hbmFnZXJzIGV4dGVuZCBSQ1RWaWV3TWFuYWdlciwgYW5kIFJDVFZpZXdNYW5hZ2VyIGRlY2xhcmVzIHRoZXNlIHByb3BzLlxuICovXG5jb25zdCBQbGF0Zm9ybUJhc2VWaWV3Q29uZmlnSW9zOiBQYXJ0aWFsVmlld0NvbmZpZ1dpdGhvdXROYW1lID0ge1xuICBidWJibGluZ0V2ZW50VHlwZXMsXG4gIGRpcmVjdEV2ZW50VHlwZXMsXG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIC4uLnZhbGlkQXR0cmlidXRlc0Zvck5vbkV2ZW50UHJvcHMsXG4gICAgLi4udmFsaWRBdHRyaWJ1dGVzRm9yRXZlbnRQcm9wcyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXRmb3JtQmFzZVZpZXdDb25maWdJb3M7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBWUE7QUFDQTtBQUtBLElBQU1BLGtCQUFrQixHQUFHO0VBRXpCQyxRQUFRLEVBQUU7SUFDUkMsdUJBQXVCLEVBQUU7TUFDdkJDLE9BQU8sRUFBRSxTQUFTO01BQ2xCQyxRQUFRLEVBQUU7SUFDWjtFQUNGLENBQUM7RUFDREMsU0FBUyxFQUFFO0lBQ1RILHVCQUF1QixFQUFFO01BQ3ZCQyxPQUFPLEVBQUUsVUFBVTtNQUNuQkMsUUFBUSxFQUFFO0lBQ1o7RUFDRixDQUFDO0VBQ0RFLFFBQVEsRUFBRTtJQUNSSix1QkFBdUIsRUFBRTtNQUN2QkMsT0FBTyxFQUFFLFNBQVM7TUFDbEJDLFFBQVEsRUFBRTtJQUNaO0VBQ0YsQ0FBQztFQUNERyxPQUFPLEVBQUU7SUFDUEwsdUJBQXVCLEVBQUU7TUFDdkJDLE9BQU8sRUFBRSxRQUFRO01BQ2pCQyxRQUFRLEVBQUU7SUFDWjtFQUNGLENBQUM7RUFDREksZ0JBQWdCLEVBQUU7SUFDaEJOLHVCQUF1QixFQUFFO01BQ3ZCQyxPQUFPLEVBQUUsaUJBQWlCO01BQzFCQyxRQUFRLEVBQUU7SUFDWjtFQUNGLENBQUM7RUFDREssYUFBYSxFQUFFO0lBQ2JQLHVCQUF1QixFQUFFO01BQ3ZCQyxPQUFPLEVBQUUsY0FBYztNQUN2QkMsUUFBUSxFQUFFO0lBQ1o7RUFDRixDQUFDO0VBQ0RNLFdBQVcsRUFBRTtJQUNYUix1QkFBdUIsRUFBRTtNQUN2QkMsT0FBTyxFQUFFLFlBQVk7TUFDckJDLFFBQVEsRUFBRTtJQUNaO0VBQ0YsQ0FBQztF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