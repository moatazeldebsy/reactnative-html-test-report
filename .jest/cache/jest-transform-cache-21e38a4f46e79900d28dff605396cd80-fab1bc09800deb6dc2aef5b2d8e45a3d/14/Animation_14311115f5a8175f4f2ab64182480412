331c1aa5ca55b1c80f381687ced3c232
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../NativeAnimatedHelper"));
var startNativeAnimationNextId = 1;
var Animation = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }
  (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        _NativeAnimatedHelper.default.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      var startNativeAnimationWaitId = startNativeAnimationNextId + ":startAnimation";
      startNativeAnimationNextId += 1;
      _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
      try {
        var config = this.__getNativeAnimationConfig();
        animatedValue.__makeNative(config.platformConfig);
        this.__nativeId = _NativeAnimatedHelper.default.generateNewAnimationId();
        _NativeAnimatedHelper.default.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config, this.__debouncedOnEnd.bind(this));
      } catch (e) {
        throw e;
      } finally {
        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }]);
  return Animation;
}();
exports.default = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCIsIkFuaW1hdGlvbiIsImZyb21WYWx1ZSIsIm9uVXBkYXRlIiwib25FbmQiLCJwcmV2aW91c0FuaW1hdGlvbiIsImFuaW1hdGVkVmFsdWUiLCJfX25hdGl2ZUlkIiwiTmF0aXZlQW5pbWF0ZWRIZWxwZXIiLCJBUEkiLCJzdG9wQW5pbWF0aW9uIiwiRXJyb3IiLCJyZXN1bHQiLCJfX29uRW5kIiwic3RhcnROYXRpdmVBbmltYXRpb25XYWl0SWQiLCJzZXRXYWl0aW5nRm9ySWRlbnRpZmllciIsImNvbmZpZyIsIl9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnIiwiX19tYWtlTmF0aXZlIiwicGxhdGZvcm1Db25maWciLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJfX2RlYm91bmNlZE9uRW5kIiwiYmluZCIsImUiLCJ1bnNldFdhaXRpbmdGb3JJZGVudGlmaWVyIl0sInNvdXJjZXMiOlsiQW5pbWF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1BsYXRmb3JtQ29uZmlnfSBmcm9tICcuLi9BbmltYXRlZFBsYXRmb3JtQ29uZmlnJztcbmltcG9ydCB0eXBlIEFuaW1hdGVkVmFsdWUgZnJvbSAnLi4vbm9kZXMvQW5pbWF0ZWRWYWx1ZSc7XG5cbmltcG9ydCBOYXRpdmVBbmltYXRlZEhlbHBlciBmcm9tICcuLi9OYXRpdmVBbmltYXRlZEhlbHBlcic7XG5cbmV4cG9ydCB0eXBlIEVuZFJlc3VsdCA9IHtmaW5pc2hlZDogYm9vbGVhbiwgLi4ufTtcbmV4cG9ydCB0eXBlIEVuZENhbGxiYWNrID0gKHJlc3VsdDogRW5kUmVzdWx0KSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBBbmltYXRpb25Db25maWcgPSB7XG4gIGlzSW50ZXJhY3Rpb24/OiBib29sZWFuLFxuICB1c2VOYXRpdmVEcml2ZXI6IGJvb2xlYW4sXG4gIHBsYXRmb3JtQ29uZmlnPzogUGxhdGZvcm1Db25maWcsXG4gIG9uQ29tcGxldGU/OiA/RW5kQ2FsbGJhY2ssXG4gIGl0ZXJhdGlvbnM/OiBudW1iZXIsXG59O1xuXG5sZXQgc3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQgPSAxO1xuXG4vLyBJbXBvcnRhbnQgbm90ZTogc3RhcnQoKSBhbmQgc3RvcCgpIHdpbGwgb25seSBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlLlxuLy8gT25jZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gc3RvcHBlZCBvciBmaW5pc2hlZCBpdHMgY291cnNlLCBpdCB3aWxsXG4vLyBub3QgYmUgcmV1c2VkLlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0aW9uIHtcbiAgX19hY3RpdmU6IGJvb2xlYW47XG4gIF9faXNJbnRlcmFjdGlvbjogYm9vbGVhbjtcbiAgX19uYXRpdmVJZDogbnVtYmVyO1xuICBfX29uRW5kOiA/RW5kQ2FsbGJhY2s7XG4gIF9faXRlcmF0aW9uczogbnVtYmVyO1xuICBzdGFydChcbiAgICBmcm9tVmFsdWU6IG51bWJlcixcbiAgICBvblVwZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQsXG4gICAgb25FbmQ6ID9FbmRDYWxsYmFjayxcbiAgICBwcmV2aW91c0FuaW1hdGlvbjogP0FuaW1hdGlvbixcbiAgICBhbmltYXRlZFZhbHVlOiBBbmltYXRlZFZhbHVlLFxuICApOiB2b2lkIHt9XG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX19uYXRpdmVJZCkge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnN0b3BBbmltYXRpb24odGhpcy5fX25hdGl2ZUlkKTtcbiAgICB9XG4gIH1cbiAgX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKTogYW55IHtcbiAgICAvLyBTdWJjbGFzc2VzIHRoYXQgaGF2ZSBjb3JyZXNwb25kaW5nIGFuaW1hdGlvbiBpbXBsZW1lbnRhdGlvbiBkb25lIGluIG5hdGl2ZVxuICAgIC8vIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZFxuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBhbmltYXRpb24gdHlwZSBjYW5ub3QgYmUgb2ZmbG9hZGVkIHRvIG5hdGl2ZScpO1xuICB9XG4gIC8vIEhlbHBlciBmdW5jdGlvbiBmb3Igc3ViY2xhc3NlcyB0byBtYWtlIHN1cmUgb25FbmQgaXMgb25seSBjYWxsZWQgb25jZS5cbiAgX19kZWJvdW5jZWRPbkVuZChyZXN1bHQ6IEVuZFJlc3VsdCk6IHZvaWQge1xuICAgIGNvbnN0IG9uRW5kID0gdGhpcy5fX29uRW5kO1xuICAgIHRoaXMuX19vbkVuZCA9IG51bGw7XG4gICAgb25FbmQgJiYgb25FbmQocmVzdWx0KTtcbiAgfVxuICBfX3N0YXJ0TmF0aXZlQW5pbWF0aW9uKGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUpOiB2b2lkIHtcbiAgICBjb25zdCBzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCA9IGAke3N0YXJ0TmF0aXZlQW5pbWF0aW9uTmV4dElkfTpzdGFydEFuaW1hdGlvbmA7XG4gICAgc3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQgKz0gMTtcbiAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIoXG4gICAgICBzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCxcbiAgICApO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb25maWcgPSB0aGlzLl9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnKCk7XG4gICAgICBhbmltYXRlZFZhbHVlLl9fbWFrZU5hdGl2ZShjb25maWcucGxhdGZvcm1Db25maWcpO1xuICAgICAgdGhpcy5fX25hdGl2ZUlkID0gTmF0aXZlQW5pbWF0ZWRIZWxwZXIuZ2VuZXJhdGVOZXdBbmltYXRpb25JZCgpO1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnN0YXJ0QW5pbWF0aW5nTm9kZShcbiAgICAgICAgdGhpcy5fX25hdGl2ZUlkLFxuICAgICAgICBhbmltYXRlZFZhbHVlLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXMgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQuYmluZCh0aGlzKSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIoXG4gICAgICAgIHN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQztBQUFBO0VBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUtiO0FBYUEsSUFBSUEsMEJBQTBCLEdBQUcsQ0FBQztBQUFDLElBS2RDLFNBQVM7RUFBQTtJQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUEsT0FNNUIsZUFDRUMsU0FBaUIsRUFDakJDLFFBQWlDLEVBQ2pDQyxLQUFtQixFQUNuQkMsaUJBQTZCLEVBQzdCQyxhQUE0QixFQUN0QixDQUFDO0VBQUM7SUFBQTtJQUFBLE9BQ1YsZ0JBQWE7TUFDWCxJQUFJLElBQUksQ0FBQ0MsVUFBVSxFQUFFO1FBQ25CQyw2QkFBb0IsQ0FBQ0MsR0FBRyxDQUFDQyxhQUFhLENBQUMsSUFBSSxDQUFDSCxVQUFVLENBQUM7TUFDekQ7SUFDRjtFQUFDO0lBQUE7SUFBQSxPQUNELHNDQUFrQztNQUdoQyxNQUFNLElBQUlJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQztJQUN0RTtFQUFDO0lBQUE7SUFBQSxPQUVELDBCQUFpQkMsTUFBaUIsRUFBUTtNQUN4QyxJQUFNUixLQUFLLEdBQUcsSUFBSSxDQUFDUyxPQUFPO01BQzFCLElBQUksQ0FBQ0EsT0FBTyxHQUFHLElBQUk7TUFDbkJULEtBQUssSUFBSUEsS0FBSyxDQUFDUSxNQUFNLENBQUM7SUFDeEI7RUFBQztJQUFBO0lBQUEsT0FDRCxnQ0FBdUJOLGFBQTRCLEVBQVE7TUFDekQsSUFBTVEsMEJBQTBCLEdBQU1kLDBCQUEwQixvQkFBaUI7TUFDakZBLDBCQUEwQixJQUFJLENBQUM7TUFDL0JRLDZCQUFvQixDQUFDQyxHQUFHLENBQUNNLHVCQUF1QixDQUM5Q0QsMEJBQTBCLENBQzNCO01BQ0QsSUFBSTtRQUNGLElBQU1FLE1BQU0sR0FBRyxJQUFJLENBQUNDLDBCQUEwQixFQUFFO1FBQ2hEWCxhQUFhLENBQUNZLFlBQVksQ0FBQ0YsTUFBTSxDQUFDRyxjQUFjLENBQUM7UUFDakQsSUFBSSxDQUFDWixVQUFVLEdBQUdDLDZCQUFvQixDQUFDWSxzQkFBc0IsRUFBRTtRQUMvRFosNkJBQW9CLENBQUNDLEdBQUcsQ0FBQ1ksa0JBQWtCLENBQ3pDLElBQUksQ0FBQ2QsVUFBVSxFQUNmRCxhQUFhLENBQUNnQixjQUFjLEVBQUUsRUFDOUJOLE1BQU0sRUFFTixJQUFJLENBQUNPLGdCQUFnQixDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ2pDO01BQ0gsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtRQUNWLE1BQU1BLENBQUM7TUFDVCxDQUFDLFNBQVM7UUFDUmpCLDZCQUFvQixDQUFDQyxHQUFHLENBQUNpQix5QkFBeUIsQ0FDaERaLDBCQUEwQixDQUMzQjtNQUNIO0lBQ0Y7RUFBQztFQUFBO0FBQUE7QUFBQSJ9