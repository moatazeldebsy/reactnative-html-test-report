d8e39f036c344847a9d8b2556997f9ec
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var stringifySafe = require('../Utilities/stringifySafe').default;
var invariant = require('invariant');
function processTransform(transform) {
  if (typeof transform === 'string') {
    var regex = new RegExp(/(\w+)\(([^)]+)\)/g);
    var transformArray = [];
    var matches;
    while (matches = regex.exec(transform)) {
      var _getKeyAndValueFromCS = _getKeyAndValueFromCSSTransform(matches[1], matches[2]),
        _key = _getKeyAndValueFromCS.key,
        value = _getKeyAndValueFromCS.value;
      if (value !== undefined) {
        transformArray.push((0, _defineProperty2.default)({}, _key, value));
      }
    }
    transform = transformArray;
  }
  if (__DEV__) {
    _validateTransforms(transform);
  }
  return transform;
}
var _getKeyAndValueFromCSSTransform = function _getKeyAndValueFromCSSTransform(key, args) {
  var _args$match;
  var argsWithUnitsRegex = new RegExp(/([+-]?\d+(\.\d+)?)([a-zA-Z]+)?/g);
  switch (key) {
    case 'matrix':
      return {
        key: key,
        value: (_args$match = args.match(/[+-]?\d+(\.\d+)?/g)) == null ? void 0 : _args$match.map(Number)
      };
    case 'translate':
    case 'translate3d':
      var parsedArgs = [];
      var missingUnitOfMeasurement = false;
      var matches;
      while (matches = argsWithUnitsRegex.exec(args)) {
        var _value = Number(matches[1]);
        var _unitOfMeasurement = matches[3];
        if (_value !== 0 && !_unitOfMeasurement) {
          missingUnitOfMeasurement = true;
        }
        parsedArgs.push(_value);
      }
      if (__DEV__) {
        invariant(!missingUnitOfMeasurement, "Transform with key " + key + " must have units unless the provided value is 0, found %s", key + "(" + args + ")");
        if (key === 'translate') {
          invariant((parsedArgs == null ? void 0 : parsedArgs.length) === 1 || (parsedArgs == null ? void 0 : parsedArgs.length) === 2, 'Transform with key translate must be an string with 1 or 2 parameters, found %s: %s', parsedArgs == null ? void 0 : parsedArgs.length, key + "(" + args + ")");
        } else {
          invariant((parsedArgs == null ? void 0 : parsedArgs.length) === 3, 'Transform with key translate3d must be an string with 3 parameters, found %s: %s', parsedArgs == null ? void 0 : parsedArgs.length, key + "(" + args + ")");
        }
      }
      if ((parsedArgs == null ? void 0 : parsedArgs.length) === 1) {
        parsedArgs.push(0);
      }
      return {
        key: 'translate',
        value: parsedArgs
      };
    case 'translateX':
    case 'translateY':
    case 'perspective':
      var argMatches = argsWithUnitsRegex.exec(args);
      if (!(argMatches != null && argMatches.length)) {
        return {
          key: key,
          value: undefined
        };
      }
      var value = Number(argMatches[1]);
      var unitOfMeasurement = argMatches[3];
      if (__DEV__) {
        invariant(value === 0 || unitOfMeasurement, "Transform with key " + key + " must have units unless the provided value is 0, found %s", key + "(" + args + ")");
      }
      return {
        key: key,
        value: value
      };
    default:
      return {
        key: key,
        value: !isNaN(args) ? Number(args) : args
      };
  }
};
function _validateTransforms(transform) {
  transform.forEach(function (transformation) {
    var keys = Object.keys(transformation);
    invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
    var key = keys[0];
    var value = transformation[key];
    _validateTransform(key, value, transformation);
  });
}
function _validateTransform(key, value, transformation) {
  invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
  var multivalueTransforms = ['matrix', 'translate'];
  if (multivalueTransforms.indexOf(key) !== -1) {
    invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
  }
  switch (key) {
    case 'matrix':
      invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'translate':
      invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'rotateX':
    case 'rotateY':
    case 'rotateZ':
    case 'rotate':
    case 'skewX':
    case 'skewY':
      invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
      invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
      break;
    case 'perspective':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
      break;
    case 'translateX':
    case 'translateY':
    case 'scale':
    case 'scaleX':
    case 'scaleY':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      break;
    default:
      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
  }
}
module.exports = processTransform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJpbmdpZnlTYWZlIiwicmVxdWlyZSIsImRlZmF1bHQiLCJpbnZhcmlhbnQiLCJwcm9jZXNzVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwicmVnZXgiLCJSZWdFeHAiLCJ0cmFuc2Zvcm1BcnJheSIsIm1hdGNoZXMiLCJleGVjIiwiX2dldEtleUFuZFZhbHVlRnJvbUNTU1RyYW5zZm9ybSIsImtleSIsInZhbHVlIiwidW5kZWZpbmVkIiwicHVzaCIsIl9fREVWX18iLCJfdmFsaWRhdGVUcmFuc2Zvcm1zIiwiYXJncyIsImFyZ3NXaXRoVW5pdHNSZWdleCIsIm1hdGNoIiwibWFwIiwiTnVtYmVyIiwicGFyc2VkQXJncyIsIm1pc3NpbmdVbml0T2ZNZWFzdXJlbWVudCIsInVuaXRPZk1lYXN1cmVtZW50IiwibGVuZ3RoIiwiYXJnTWF0Y2hlcyIsImlzTmFOIiwiZm9yRWFjaCIsInRyYW5zZm9ybWF0aW9uIiwia2V5cyIsIk9iamVjdCIsIl92YWxpZGF0ZVRyYW5zZm9ybSIsImdldFZhbHVlIiwibXVsdGl2YWx1ZVRyYW5zZm9ybXMiLCJpbmRleE9mIiwiQXJyYXkiLCJpc0FycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInByb2Nlc3NUcmFuc2Zvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpbmdpZnlTYWZlID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL3N0cmluZ2lmeVNhZmUnKS5kZWZhdWx0O1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSB0cmFuc2Zvcm0gbWF0cml4IGJhc2VkIG9uIHRoZSBwcm92aWRlZCB0cmFuc2Zvcm1zLCBhbmQgdXNlIHRoYXRcbiAqIHdpdGhpbiB0aGUgc3R5bGUgb2JqZWN0IGluc3RlYWQuXG4gKlxuICogVGhpcyBhbGxvd3MgdXMgdG8gcHJvdmlkZSBhbiBBUEkgdGhhdCBpcyBzaW1pbGFyIHRvIENTUywgd2hlcmUgdHJhbnNmb3JtcyBtYXlcbiAqIGJlIGFwcGxpZWQgaW4gYW4gYXJiaXRyYXJ5IG9yZGVyLCBhbmQgeWV0IGhhdmUgYSB1bml2ZXJzYWwsIHNpbmd1bGFyXG4gKiBpbnRlcmZhY2UgdG8gbmF0aXZlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NUcmFuc2Zvcm0oXG4gIHRyYW5zZm9ybTogQXJyYXk8T2JqZWN0PiB8IHN0cmluZyxcbik6IEFycmF5PE9iamVjdD4gfCBBcnJheTxudW1iZXI+IHtcbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKC8oXFx3KylcXCgoW14pXSspXFwpL2cpO1xuICAgIGxldCB0cmFuc2Zvcm1BcnJheTogQXJyYXk8T2JqZWN0PiA9IFtdO1xuICAgIGxldCBtYXRjaGVzO1xuXG4gICAgd2hpbGUgKChtYXRjaGVzID0gcmVnZXguZXhlYyh0cmFuc2Zvcm0pKSkge1xuICAgICAgY29uc3Qge2tleSwgdmFsdWV9ID0gX2dldEtleUFuZFZhbHVlRnJvbUNTU1RyYW5zZm9ybShcbiAgICAgICAgbWF0Y2hlc1sxXSxcbiAgICAgICAgbWF0Y2hlc1syXSxcbiAgICAgICk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRyYW5zZm9ybUFycmF5LnB1c2goe1trZXldOiB2YWx1ZX0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1BcnJheTtcbiAgfVxuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgX3ZhbGlkYXRlVHJhbnNmb3Jtcyh0cmFuc2Zvcm0pO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuY29uc3QgX2dldEtleUFuZFZhbHVlRnJvbUNTU1RyYW5zZm9ybTogKFxuICBrZXk6XG4gICAgfCBzdHJpbmdcbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdtYXRyaXgnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3BlcnNwZWN0aXZlJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdyb3RhdGUnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3JvdGF0ZVgnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3JvdGF0ZVknPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3JvdGF0ZVonPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3NjYWxlJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdzY2FsZVgnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3NjYWxlWSc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwnc2tld1gnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3NrZXdZJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCd0cmFuc2xhdGUnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3RyYW5zbGF0ZTNkJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCd0cmFuc2xhdGVYJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCd0cmFuc2xhdGVZJz4sXG4gIGFyZ3M6IHN0cmluZyxcbikgPT4ge2tleTogc3RyaW5nLCB2YWx1ZT86IG51bWJlcltdIHwgbnVtYmVyIHwgc3RyaW5nfSA9IChrZXksIGFyZ3MpID0+IHtcbiAgY29uc3QgYXJnc1dpdGhVbml0c1JlZ2V4ID0gbmV3IFJlZ0V4cCgvKFsrLV0/XFxkKyhcXC5cXGQrKT8pKFthLXpBLVpdKyk/L2cpO1xuXG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnbWF0cml4JzpcbiAgICAgIHJldHVybiB7a2V5LCB2YWx1ZTogYXJncy5tYXRjaCgvWystXT9cXGQrKFxcLlxcZCspPy9nKT8ubWFwKE51bWJlcil9O1xuICAgIGNhc2UgJ3RyYW5zbGF0ZSc6XG4gICAgY2FzZSAndHJhbnNsYXRlM2QnOlxuICAgICAgY29uc3QgcGFyc2VkQXJncyA9IFtdO1xuICAgICAgbGV0IG1pc3NpbmdVbml0T2ZNZWFzdXJlbWVudCA9IGZhbHNlO1xuXG4gICAgICBsZXQgbWF0Y2hlcztcbiAgICAgIHdoaWxlICgobWF0Y2hlcyA9IGFyZ3NXaXRoVW5pdHNSZWdleC5leGVjKGFyZ3MpKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IE51bWJlcihtYXRjaGVzWzFdKTtcbiAgICAgICAgY29uc3QgdW5pdE9mTWVhc3VyZW1lbnQgPSBtYXRjaGVzWzNdO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gMCAmJiAhdW5pdE9mTWVhc3VyZW1lbnQpIHtcbiAgICAgICAgICBtaXNzaW5nVW5pdE9mTWVhc3VyZW1lbnQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkQXJncy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICFtaXNzaW5nVW5pdE9mTWVhc3VyZW1lbnQsXG4gICAgICAgICAgYFRyYW5zZm9ybSB3aXRoIGtleSAke2tleX0gbXVzdCBoYXZlIHVuaXRzIHVubGVzcyB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgMCwgZm91bmQgJXNgLFxuICAgICAgICAgIGAke2tleX0oJHthcmdzfSlgLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICd0cmFuc2xhdGUnKSB7XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgcGFyc2VkQXJncz8ubGVuZ3RoID09PSAxIHx8IHBhcnNlZEFyZ3M/Lmxlbmd0aCA9PT0gMixcbiAgICAgICAgICAgICdUcmFuc2Zvcm0gd2l0aCBrZXkgdHJhbnNsYXRlIG11c3QgYmUgYW4gc3RyaW5nIHdpdGggMSBvciAyIHBhcmFtZXRlcnMsIGZvdW5kICVzOiAlcycsXG4gICAgICAgICAgICBwYXJzZWRBcmdzPy5sZW5ndGgsXG4gICAgICAgICAgICBgJHtrZXl9KCR7YXJnc30pYCxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIHBhcnNlZEFyZ3M/Lmxlbmd0aCA9PT0gMyxcbiAgICAgICAgICAgICdUcmFuc2Zvcm0gd2l0aCBrZXkgdHJhbnNsYXRlM2QgbXVzdCBiZSBhbiBzdHJpbmcgd2l0aCAzIHBhcmFtZXRlcnMsIGZvdW5kICVzOiAlcycsXG4gICAgICAgICAgICBwYXJzZWRBcmdzPy5sZW5ndGgsXG4gICAgICAgICAgICBgJHtrZXl9KCR7YXJnc30pYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJzZWRBcmdzPy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcGFyc2VkQXJncy5wdXNoKDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge2tleTogJ3RyYW5zbGF0ZScsIHZhbHVlOiBwYXJzZWRBcmdzfTtcbiAgICBjYXNlICd0cmFuc2xhdGVYJzpcbiAgICBjYXNlICd0cmFuc2xhdGVZJzpcbiAgICBjYXNlICdwZXJzcGVjdGl2ZSc6XG4gICAgICBjb25zdCBhcmdNYXRjaGVzID0gYXJnc1dpdGhVbml0c1JlZ2V4LmV4ZWMoYXJncyk7XG5cbiAgICAgIGlmICghYXJnTWF0Y2hlcz8ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB7a2V5LCB2YWx1ZTogdW5kZWZpbmVkfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoYXJnTWF0Y2hlc1sxXSk7XG4gICAgICBjb25zdCB1bml0T2ZNZWFzdXJlbWVudCA9IGFyZ01hdGNoZXNbM107XG5cbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICB2YWx1ZSA9PT0gMCB8fCB1bml0T2ZNZWFzdXJlbWVudCxcbiAgICAgICAgICBgVHJhbnNmb3JtIHdpdGgga2V5ICR7a2V5fSBtdXN0IGhhdmUgdW5pdHMgdW5sZXNzIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyAwLCBmb3VuZCAlc2AsXG4gICAgICAgICAgYCR7a2V5fSgke2FyZ3N9KWAsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7a2V5LCB2YWx1ZX07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtrZXksIHZhbHVlOiAhaXNOYU4oYXJncykgPyBOdW1iZXIoYXJncykgOiBhcmdzfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX3ZhbGlkYXRlVHJhbnNmb3Jtcyh0cmFuc2Zvcm06IEFycmF5PE9iamVjdD4pOiB2b2lkIHtcbiAgdHJhbnNmb3JtLmZvckVhY2godHJhbnNmb3JtYXRpb24gPT4ge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0cmFuc2Zvcm1hdGlvbik7XG4gICAgaW52YXJpYW50KFxuICAgICAga2V5cy5sZW5ndGggPT09IDEsXG4gICAgICAnWW91IG11c3Qgc3BlY2lmeSBleGFjdGx5IG9uZSBwcm9wZXJ0eSBwZXIgdHJhbnNmb3JtIG9iamVjdC4gUGFzc2VkIHByb3BlcnRpZXM6ICVzJyxcbiAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICk7XG4gICAgY29uc3Qga2V5ID0ga2V5c1swXTtcbiAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybWF0aW9uW2tleV07XG4gICAgX3ZhbGlkYXRlVHJhbnNmb3JtKGtleSwgdmFsdWUsIHRyYW5zZm9ybWF0aW9uKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIF92YWxpZGF0ZVRyYW5zZm9ybShcbiAga2V5OlxuICAgIHwgc3RyaW5nXG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwnbWF0cml4Jz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdwZXJzcGVjdGl2ZSc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwncm90YXRlJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdyb3RhdGVYJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdyb3RhdGVZJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdyb3RhdGVaJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdzY2FsZSc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwnc2NhbGVYJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdzY2FsZVknPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3NrZXdYJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdza2V3WSc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwndHJhbnNsYXRlJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCd0cmFuc2xhdGVYJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCd0cmFuc2xhdGVZJz4sXG4gIHZhbHVlOiBhbnkgfCBudW1iZXIgfCBzdHJpbmcsXG4gIHRyYW5zZm9ybWF0aW9uOiBhbnksXG4pIHtcbiAgaW52YXJpYW50KFxuICAgICF2YWx1ZS5nZXRWYWx1ZSxcbiAgICAnWW91IHBhc3NlZCBhbiBBbmltYXRlZC5WYWx1ZSB0byBhIG5vcm1hbCBjb21wb25lbnQuICcgK1xuICAgICAgJ1lvdSBuZWVkIHRvIHdyYXAgdGhhdCBjb21wb25lbnQgaW4gYW4gQW5pbWF0ZWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICdyZXBsYWNlIDxWaWV3IC8+IGJ5IDxBbmltYXRlZC5WaWV3IC8+LicsXG4gICk7XG5cbiAgY29uc3QgbXVsdGl2YWx1ZVRyYW5zZm9ybXMgPSBbJ21hdHJpeCcsICd0cmFuc2xhdGUnXTtcbiAgaWYgKG11bHRpdmFsdWVUcmFuc2Zvcm1zLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSxcbiAgICAgICdUcmFuc2Zvcm0gd2l0aCBrZXkgb2YgJXMgbXVzdCBoYXZlIGFuIGFycmF5IGFzIHRoZSB2YWx1ZTogJXMnLFxuICAgICAga2V5LFxuICAgICAgc3RyaW5naWZ5U2FmZSh0cmFuc2Zvcm1hdGlvbiksXG4gICAgKTtcbiAgfVxuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHZhbHVlLmxlbmd0aCA9PT0gOSB8fCB2YWx1ZS5sZW5ndGggPT09IDE2LFxuICAgICAgICAnTWF0cml4IHRyYW5zZm9ybSBtdXN0IGhhdmUgYSBsZW5ndGggb2YgOSAoMmQpIG9yIDE2ICgzZCkuICcgK1xuICAgICAgICAgICdQcm92aWRlZCBtYXRyaXggaGFzIGEgbGVuZ3RoIG9mICVzOiAlcycsXG4gICAgICAgIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAoPj0wLjg0LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXNcbiAgICAgICAgICogY29tbWVudCBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44NCB3YXMgZGVwbG95ZWQuIFRvXG4gICAgICAgICAqIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgICB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RyYW5zbGF0ZSc6XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHZhbHVlLmxlbmd0aCA9PT0gMiB8fCB2YWx1ZS5sZW5ndGggPT09IDMsXG4gICAgICAgICdUcmFuc2Zvcm0gd2l0aCBrZXkgdHJhbnNsYXRlIG11c3QgYmUgYW4gYXJyYXkgb2YgbGVuZ3RoIDIgb3IgMywgZm91bmQgJXM6ICVzJyxcbiAgICAgICAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddICg+PTAuODQuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpc1xuICAgICAgICAgKiBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg0IHdhcyBkZXBsb3llZC4gVG9cbiAgICAgICAgICogc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXMgY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG4gICAgICAgIHZhbHVlLmxlbmd0aCxcbiAgICAgICAgc3RyaW5naWZ5U2FmZSh0cmFuc2Zvcm1hdGlvbiksXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncm90YXRlWCc6XG4gICAgY2FzZSAncm90YXRlWSc6XG4gICAgY2FzZSAncm90YXRlWic6XG4gICAgY2FzZSAncm90YXRlJzpcbiAgICBjYXNlICdza2V3WCc6XG4gICAgY2FzZSAnc2tld1knOlxuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnLFxuICAgICAgICAnVHJhbnNmb3JtIHdpdGgga2V5IG9mIFwiJXNcIiBtdXN0IGJlIGEgc3RyaW5nOiAlcycsXG4gICAgICAgIGtleSxcbiAgICAgICAgc3RyaW5naWZ5U2FmZSh0cmFuc2Zvcm1hdGlvbiksXG4gICAgICApO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICB2YWx1ZS5pbmRleE9mKCdkZWcnKSA+IC0xIHx8IHZhbHVlLmluZGV4T2YoJ3JhZCcpID4gLTEsXG4gICAgICAgICdSb3RhdGUgdHJhbnNmb3JtIG11c3QgYmUgZXhwcmVzc2VkIGluIGRlZ3JlZXMgKGRlZykgb3IgcmFkaWFucyAnICtcbiAgICAgICAgICAnKHJhZCk6ICVzJyxcbiAgICAgICAgc3RyaW5naWZ5U2FmZSh0cmFuc2Zvcm1hdGlvbiksXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncGVyc3BlY3RpdmUnOlxuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgICAgICAnVHJhbnNmb3JtIHdpdGgga2V5IG9mIFwiJXNcIiBtdXN0IGJlIGEgbnVtYmVyOiAlcycsXG4gICAgICAgIGtleSxcbiAgICAgICAgc3RyaW5naWZ5U2FmZSh0cmFuc2Zvcm1hdGlvbiksXG4gICAgICApO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICB2YWx1ZSAhPT0gMCxcbiAgICAgICAgJ1RyYW5zZm9ybSB3aXRoIGtleSBvZiBcIiVzXCIgY2Fubm90IGJlIHplcm86ICVzJyxcbiAgICAgICAga2V5LFxuICAgICAgICBzdHJpbmdpZnlTYWZlKHRyYW5zZm9ybWF0aW9uKSxcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0cmFuc2xhdGVYJzpcbiAgICBjYXNlICd0cmFuc2xhdGVZJzpcbiAgICBjYXNlICdzY2FsZSc6XG4gICAgY2FzZSAnc2NhbGVYJzpcbiAgICBjYXNlICdzY2FsZVknOlxuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgICAgICAnVHJhbnNmb3JtIHdpdGgga2V5IG9mIFwiJXNcIiBtdXN0IGJlIGEgbnVtYmVyOiAlcycsXG4gICAgICAgIGtleSxcbiAgICAgICAgc3RyaW5naWZ5U2FmZSh0cmFuc2Zvcm1hdGlvbiksXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdJbnZhbGlkIHRyYW5zZm9ybSAlczogJXMnLFxuICAgICAgICBrZXksXG4gICAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICAgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3NUcmFuc2Zvcm07XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUM7QUFBQTtBQUViLElBQU1BLGFBQWEsR0FBR0MsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUNDLE9BQU87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