{"version":3,"names":["linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","inputRange","__DEV__","checkInfiniteRange","checkValidInputRange","invariant","length","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","result","Infinity","colorToRgba","normalizedColor","normalizeColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","value","number","i","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","message","name","AnimatedInterpolation","parent","_parent","_config","_interpolation","platformConfig","__makeNative","parentValue","__getValue","__addChild","__removeChild","NativeAnimatedHelper","transformDataType","validateInterpolation","__transformDataType","type","AnimatedWithChildren","__createInterpolation"],"sources":["AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\nconst linear = (t: number) => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation<OutputT: number | string>(\n  config: InterpolationConfigType<OutputT>,\n): (input: number) => OutputT {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return (createInterpolationFromStringOutputRange((config: any)): any);\n  }\n\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n\n  const inputRange = config.inputRange;\n\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n\n    invariant(\n      inputRange.length === outputRange.length,\n      'inputRange (' +\n        inputRange.length +\n        ') and outputRange (' +\n        outputRange.length +\n        ') must have the same length',\n    );\n  }\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range: string) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType<OutputT>,\n  ) => (input: number) => OutputT = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: (input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: $ReadOnlyArray<OutputT>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"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"}